

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <div class="text-center">
        <h1 class="display-4">Witaj na forum</h1>
        <p>Statystyki Forum :</p>

        <div class="row mt-4">
            <!-- Liczba kategorii -->
            <div class="col-md-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Kategorii</h5>
                        <p class="card-text display-4">@ViewBag.TotalCategories</p>
                    </div>
                </div>
            </div>

            <!-- Liczba postów -->
            <div class="col-md-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Postów</h5>
                        <p class="card-text display-4">@ViewBag.TotalPosts</p>
                    </div>
                </div>
            </div>

            <!-- Liczba wiadomości -->
            <div class="col-md-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Wiadomości</h5>
                        <p class="card-text display-4">@ViewBag.TotalMessages</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Użytkowników</h5>
                        <p class="card-text display-4">@ViewBag.TotalUsers</p>
                    </div>
                </div>
            </div>
            
            @if (User.IsInRole(SD.Role_Admin))
            {
                <div>
                    Tą wiadomość widzi tylko administrator
                </div>
            }
        </div>
    </div>

    <div class="mt-5 d-flex justify-content-center">
        <div class="col-md-5">
            <h3 class="mb-3">Czat na żywo</h3>
            <div id="messagesList" class="chat-box text-start border   bg-light"></div>
            <input type="hidden" id="userInput" value="@User.Identity.Name"/>

            @if (User.Identity.IsAuthenticated)
            {
            <div class="input-group mb-3">
                <input type="text" id="messageInput" class="form-control" placeholder="Wpisz wiadomość..."/>
                <button id="sendButton" class="btn btn-primary">Wyślij</button>
            </div>
            }
            else
            {
            <div class="alert alert-warning mt-5">
                <strong>Musisz być zalogowany, aby korzystać z czatu.</strong> <br>
                <a href="/Identity/Account/Login" class="btn btn-success mt-2">Zaloguj się</a>
            </div>
            }
        </div>
    </div>



    @section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start()
            .then(() => {
                console.log("Połączono z SignalR");
                return connection.invoke("LoadChatHistory"); // Pobierz historię wiadomości
            })
            .catch(err => console.error("Błąd połączenia:", err.toString()));

        document.getElementById("sendButton").addEventListener("click", sendMessage);
        document.getElementById("messageInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
});

        function sendMessage() {
            const user = document.getElementById("userInput").value;
            const message = document.getElementById("messageInput").value;

            if (user && message) {
                console.log(`Wysyłanie wiadomości: ${user} - ${message}`);
                connection.invoke("SendMessage", message).catch(err => console.error("Błąd wysyłania:", err.toString()));
                document.getElementById("messageInput").value = "";
            }
}

        connection.on("LoadMessages", function (messages) {
            console.log("📜 Ładowanie historii czatu...");
            console.log(messages); // Debugowanie danych

            messages.forEach(msg => {
                console.log("📥 Otrzymano wiadomość:", msg);
                addMessage(msg.userName ?? "Anonim", msg.content ?? "Brak treści");
            });
        });

        connection.on("ReceiveMessage", function (message) {
            console.log("📥 Otrzymano nową wiadomość:", message);
            addMessage(message.userName ?? "Anonim", message.content ?? "Brak treści");
        });

        function addMessage(user, message) {
            console.log(`Dodawanie wiadomości: ${user} - ${message}`);

            const msgDiv = document.createElement("div");
            msgDiv.classList.add("alert", "alert-secondary", "p-2", "m-1", "w-100", "text-break");

            // Sprawdź, czy wartości nie są undefined lub null
            const displayUser = user && user.trim() !== "" ? user : "Anonim";
            const displayMessage = message && message.trim() !== "" ? message : "Brak treści";

            msgDiv.innerHTML = `<strong>${displayUser}:</strong> ${displayMessage}`;

            document.getElementById("messagesList").appendChild(msgDiv);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        }
    </script>

    <style>
        .chat-box {
            min-height: 400px;
            max-height: 400px;
            overflow-y: auto;
            min-width: 500px;
            max-width: 500px;
        }
    </style>
    }

</div>


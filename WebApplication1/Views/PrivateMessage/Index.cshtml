@{
    ViewData["Title"] = "Prywatne wiadomości";
}

<div class="container mt-4">
    <h2>Prywatne wiadomości</h2>

    <div class="row">
        <!-- Lista wszystkich użytkowników -->
        <div class="col-md-4">
            <h4>Lista użytkowników</h4>
            <ul class="list-group" id="usersList">
                <!-- Lista użytkowników zostanie uzupełniona przez JS -->
            </ul>
        </div>

        <!-- Okno czatu -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 id="chatTitle">Wybierz rozmowę</h5>
                </div>
                <div class="card-body chat-box" id="chatMessages">
                    <p class="text-muted">Brak wiadomości</p>
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Wpisz wiadomość..."/>
                        <button id="sendButton" class="btn btn-primary" disabled>Wyślij</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let selectedUser = null;
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("sendButton").addEventListener("click", sendMessage);
            document.getElementById("messageInput").addEventListener("keypress", function (event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    sendMessage();
                }
            });

            // Ładujemy nieprzeczytane wiadomości przy starcie
            checkUnreadMessages();
        });
        document.addEventListener("DOMContentLoaded", function () {
            loadUsers();
            setTimeout(checkUnreadMessages, 1000); // Oczekiwanie na załadowanie listy użytkowników
        });


        // Połączenie z SignalR
        connection.start()
            .then(() => {
                console.log("✅ Połączono z SignalR");
                loadUsers();
            })
            .catch(err => console.error("❌ Błąd połączenia:", err.toString()));

        // Pobranie listy użytkowników
        function loadUsers() {
            fetch("/GetUsers")
                .then(response => response.json())
                .then(data => {
                    const list = document.getElementById("usersList");
                    list.innerHTML = "";

                    data.forEach(user => {
                        const li = document.createElement("li");
                        li.classList.add("list-group-item", "user-item");
                        li.dataset.userId = user.id;
                        li.textContent = user.userName;
                        li.addEventListener("click", () => selectUser(user.id, user.userName));
                        list.appendChild(li);
                    });

                    // Po załadowaniu użytkowników, sprawdzamy nieprzeczytane wiadomości
                    checkUnreadMessages();
                })
                .catch(err => console.error("❌ Błąd ładowania użytkowników:", err.toString()));
        }

        // Wybór użytkownika do czatu
        function selectUser(userId, userName) {
            selectedUser = userId;
            document.getElementById("chatTitle").innerText = "Czat z " + userName;
            document.getElementById("chatMessages").innerHTML = "";
            document.getElementById("sendButton").disabled = false;

            console.log(`📤 Otworzono czat z użytkownikiem: ${userId}`);

            // Pobranie historii czatu
            connection.invoke("LoadPrivateChatHistory", userId)
                .catch(err => console.error("❌ Błąd ładowania historii czatu:", err.toString()));

            // Oznacz wiadomości jako przeczytane
            markMessagesAsRead(userId);

            // Usuń kropkę, bo użytkownik wszedł do rozmowy
            removeUnreadDot(userId);
        }


        // Wysłanie wiadomości
        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (!selectedUser || message === "") {
                alert("Nie można wysłać pustej wiadomości.");
                return;
            }

            console.log(`📩 Wysyłanie wiadomości do: ${selectedUser} - ${message}`);

            connection.invoke("SendPrivateMessage", selectedUser, message)
                .then(() => {
                    addMessage("Ty", message);
                })
                .catch(err => console.error("❌ Błąd wysyłania:", err.toString()));

            messageInput.value = "";
       
        }

        // Odbiór wiadomości w czasie rzeczywistym
        connection.on("ReceivePrivateMessage", function (senderId, senderName, message) {
            if (selectedUser === senderId) {
                addMessage(senderName, message);
                markMessagesAsRead(senderId);
            } else {
                markAsUnread(senderId);
            }
        });

        // Odbiór powiadomienia o nowej wiadomości (server push)
        connection.on("UpdateUnreadMessages", function (senderId) {
            console.log(`🔔 Otrzymano powiadomienie o nowej wiadomości od użytkownika: ${senderId}`);
            markAsUnread(senderId);
            //loadUsers();
            checkUnreadMessages();
        });

        // Dodanie wiadomości do okna czatu + przewinięcie do dołu
        function addMessage(user, message) {
            const msgDiv = document.createElement("div");
            msgDiv.classList.add("alert", "alert-secondary", "p-2", "m-1", "w-100", "text-break");
            msgDiv.innerHTML = `<strong>${user}:</strong> ${message}`;
            document.getElementById("chatMessages").appendChild(msgDiv);
              
            scrollToBottom();
        }

        // Oznaczenie wiadomości jako przeczytanych
        function markMessagesAsRead(otherUserId) {
            fetch('/MarkMessagesAsRead', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otherUserId })
            }).then(response => {
                if (response.ok) {
                    console.log(`✅ Wiadomości od ${otherUserId} oznaczone jako przeczytane.`);
                    setTimeout(checkUnreadMessages, 2000); // Odświeżenie stanu po 2 sek.
                } else {
                    console.error("❌ Błąd podczas oznaczania wiadomości jako przeczytane.");
                }
            }).catch(error => console.error("❌ Błąd połączenia z serwerem:", error));
        }




        // Oznaczenie użytkownika jako posiadającego nieprzeczytane wiadomości
        function markAsUnread(userId, unreadCount) {
            const userElement = document.querySelector(`.user-item[data-user-id="${userId}"]`);
            if (userElement) {
                let unreadDot = userElement.querySelector('.unread-dot');
                if (!unreadDot) {
                    unreadDot = document.createElement('span');
                    unreadDot.classList.add('unread-dot');
                    unreadDot.style.color = 'red';
                    unreadDot.style.fontWeight = 'bold';
                    unreadDot.style.marginLeft = '5px';
                    userElement.appendChild(unreadDot);
                }
                unreadDot.textContent = unreadCount ? `● (${unreadCount})` : `● (1)`;
            
            }
        }

        // Usunięcie kropki nieprzeczytanych wiadomości po otwarciu konwersacji
        function removeUnreadDot(userId) {
            const userElement = document.querySelector(`.user-item[data-user-id="${userId}"]`);
            if (userElement) {
                const unreadDot = userElement.querySelector('.unread-dot');
                if (unreadDot) {
                    unreadDot.remove();
                    console.log(`✅ Kropka usunięta dla użytkownika: ${userId}`);
                }
            }
        }


        // Sprawdzenie nieprzeczytanych wiadomości dla użytkowników
        function checkUnreadMessages() {
            fetch('/GetUnreadMessages')
                .then(response => response.json())
                .then(data => {
                    console.log("📩 Otrzymano nieprzeczytane wiadomości:", data);
                    console.log("📩 Otrzymano nieprzeczytane wiadomości:", data[0].senderId);

                    document.querySelectorAll('.unread-dot').forEach(dot => dot.remove()); // Usuń stare kropki
            
                    markAsUnread(data[0].senderId, data[0].unreadCount);
                    
                })
                .catch(err => console.error("❌ Błąd pobierania nieprzeczytanych wiadomości:", err.toString()));
        }


        // Funkcja do przewijania na dół
        function scrollToBottom() {
            const chatMessages = document.getElementById("chatMessages");
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Załaduj historię wiadomości
        connection.on("LoadPrivateMessages", function (messages) {
            console.log("📜 Otrzymano historię czatu:", messages);
            document.getElementById("chatMessages").innerHTML = "";

            messages.forEach(msg => addMessage(msg.senderName, msg.content));

            // Po załadowaniu historii przewiń na dół
            scrollToBottom();
        });




    </script>

    <style>
    .chat-box {
        min-height: 300px;
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        background-color: #f8f9fa;
    }
    .user-item {
        cursor: pointer;
    }
    .user-item:hover {
        background-color: #e9ecef;
    }
</style>
}